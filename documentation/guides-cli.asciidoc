:toc: macro

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

toc::[]
:idprefix:
:idseparator: -
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

= devon4node CLI

devon4node CLI is a tool designed to manage devon4node applications in a easy way. Highly inspired by Nest CLI.

In this page we will explain all commands available and their arguments.

== Prerequisites

- NodeJS lts
- yarn

== devon4node

After install the devon4node CLI package `npm i -g @devon4node/cli`, the command `devon4node` (or `d4n`) must be available in your system. This have `new`, `generate` and `db` subcommands and also accepts the following arguments:

|====
| *Arguments*    | *Description*
|--help, -h      | Shows help
|-v, --version   | Shows version number
|====

Examples:

----
devon4node -h
devon4node new -h
----

=== new

`devon4node new` allows you to create new devon4node applications. It's an interactive command and it will ask you for everything that it need in order to create a new application.

|========
| *Arguments*           | *Description*
| --help, -h            | Show help
| --no-interactive, -n  | Execute the command without ask anything to the user
| --dry-run             | Allow to test changes before execute command.
| --skip-git, -g        | Allow to skip git repository initialization.
| --skip-install, -s    | Allow to skip package installation.
| --typeorm, -t         | Allow to select the type of database.
| --config-module, -c   | Allow to add config module or not.
| --swagger, -a         | Allow to add swagger module or not.
| --security, -y        | Allow to add security (cors + HTTP security headers) or not.
| --mailer, -m          | Allow to add mailer module or not.
| --auth-jwt, -j        | Allow to add Auth JWT module or not.
| --version, -v         | Show version number
|========

Examples:

----
devon4node new my-app -sg
devon4node new my-app -n
devon4node new my-app -n -typeorm sqlite -config-module -auth-jwt
----

=== generate

This command allows you to generate code into your application. It receive he name of the schematic that will generate the code.

|========
| *Arguments*           | *Description*
| --help, -h            | Show help
| --interactive, -i     | Generate code using the interactive mode (same as new command).
| --skip-install, -s    | Allow to skip package installation.
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Path to project.
|========

Examples:

----
devon4node generate -i
devon4node generate service --name my-service
----

==== application

Create a devon4node application. It is used by the new command.

|========
| *Arguments*           | *Description*
| --dry-run, -d         | Allow to test changes before execute command.
| --path,               | Path to project.
| --name, -n            | The name of the application.
|========

==== angular-app

Create a new Angular application. Inherit from link:https://docs.nestjs.com/cli/overview[Nest CLI]

|========
| *Arguments*           | *Description*
| --dry-run, -d         | Allow to test changes before execute command.
| --path,               | Path to project.
| --initApp             | Flag to skip the angular application generation.
| --name, -n            | The name of the application.
|========

==== class

Create a new class.Inherit from link:https://docs.nestjs.com/cli/overview[Nest CLI]

|========
| *Arguments*           | *Description*
|--dry-run, -d          | Allow to test changes before execute command.
|--path, -p             | The path to create the class.
|--name, -n             | The name of the class.
|--flat                 | Flag to indicate if a directory is created.
|--spec                 | Specifies if a spec file is generated.
|--language             | Nest class language (ts/js).
|--sourceRoot           | Nest controller source root directory.
|========

==== controller

Create a Nest controller.

|========
| *Arguments*           | *Description*
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the controller.
| --name, -n            | The name of the controller. To create a controller with name Banana in the module fruits you need to introduce fruits/banana
| --spec                | Specifies if a spec file is generated.
|========

==== decorator

Create a Nest decorator. Inherit from link:https://docs.nestjs.com/cli/overview[Nest CLI]

|========
| *Arguments*           | *Description*
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the decorator.
| --name, -n            | The name of the decorator.
| --language            | Nest decorator language (ts/js).
| --sourceRoot          | Nest decorator source root directory.
| --flat                | Flag to indicate if a directory is created.
|========

==== filter

Create a Nest filter.

|========
| *Arguments*           | *Description*
|--dry-run, -d          | Allow to test changes before execute command.
|--path, -p             | The path to create the filter.
|--name, -n             | The name of the filter. To create a filter with name Banana in the module fruits you need to introduce fruits/banana
|--language             | Nest filter language (ts/js).
|--sourceRoot           | Nest filter source root directory.
|--flat                 | Flag to indicate if a directory is created.
|--spec                 | Specifies if a spec file is generated.
|========

==== gateway

Create a Nest gateway. Inherit from link:https://docs.nestjs.com/cli/overview[Nest CLI]

|========
| *Arguments*           | *Description*
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the gateway.
| --name, -n            | The name of the gateway.
| --language            | Nest gateway language (ts/js).
| --sourceRoot          | Nest gateway source root directory.
| --flat                | Flag to indicate if a directory is created.
| --spec                | Specifies if a spec file is generated.
|========

==== guard

Create a Nest guard.

|========
| *Arguments*           | *Description*
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the guard.
| --name, -n            | The name of the guard. To create a guard with name Banana in the module fruits you need to introduce fruits/banana
| --language            | Nest guard language (ts/js).
| --sourceRoot          | Nest guard source root directory.
| --flat                | Flag to indicate if a directory is created.
| --spec                | Specifies if a spec file is generated.
|========

==== interceptor

Create a Nest interceptor.

|========
| *Arguments*           | *Description*
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the interceptor.
| --name, -n            | The name of the interceptor. To create an interceptor with name Banana in the module fruits you need to introduce fruits/banana
| --language            | Nest interceptor language (ts/js).
| --sourceRoot          | Nest interceptor source root directory.
| --flat                | Flag to indicate if a directory is created.
| --spec                | Specifies if a spec file is generated.
|========

==== interface

Create a Nest interface. Inherit from link:https://docs.nestjs.com/cli/overview[Nest CLI]

|========
| *Arguments*           | *Description*
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the interface.
| --name, -n            | The name of the interface.
| --sourceRoot          | Nest interface source root directory
| --flat                | Flag to indicate if a directory is created.
|========

==== middleware

Create a Nest middleware.

|========
| *Arguments*           | *Description*
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the middleware.
| --name, -n            | The name of the middleware. To create a middleware with name Banana in the module fruits you need to introduce fruits/banana
| --language            | Nest middleware language (ts/js).
| --sourceRoot          | Nest middleware source root directory.
| --flat                | Flag to indicate if a directory is created.
| --spec                | Specifies if a spec file is generated.
|========

==== module

Create a Nest module.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the module.
| --name, -n            | The name of the module. To create a module named module-b as a submodule of module-a, you need to introduce module-a/module-b
| --module              | The path to import the module.
| --language            | Nest module language (ts/js).
| --sourceRoot          | Nest module source root directory.
| --skipImport          | Flag to skip the module import.
|========

==== pipe

Create a Nest pipe.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the pipe.
| --name, -n            | The name of the pipe. To create a pipe with name Banana in the module fruits you need to introduce fruits/banana
| --language            | Nest pipe language (ts/js).
| --sourceRoot          | Nest pipe source root directory.
| --flat                | Flag to indicate if a directory is created.
| --spec                | Specifies if a spec file is generated.
|========

==== provider

Create a Nest provider. Inherit from link:https://docs.nestjs.com/cli/overview[Nest CLI]

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the provider.
| --name, -n            | The name of the provider.
| --language            | Nest provider language (ts/js).
| --sourceRoot          | Nest provider source root directory.
| --flat                | Flag to indicate if a directory is created.
| --spec                | Specifies if a spec file is generated.
|========

==== service

Create a Nest service.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the service.
| --name, -n            | The name of the service.
| --spec                | Specifies if a spec file is generated. To create a service with name Banana in the module fruits you need to introduce fruits/banana
|========

==== resolver

Create a Nest resolver. Inherit from link:https://docs.nestjs.com/cli/overview[Nest CLI]

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the resolver.
| --name, -n            | The name of the resolver.
| --language            | Nest resolver language (ts/js).
| --sourceRoot          | Nest resolver source root directory.
| --flat                | Flag to indicate if a directory is created.
| --spec                | Specifies if a spec file is generated.
|========

==== configuration

Create a Nest CLI configuration. Inherit from link:https://docs.nestjs.com/cli/overview[Nest CLI]

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --dry-run, -d         | Allow to test changes before execute command.
| --path,               | Path to project.
|========

==== library

Create a Nest library (mono-repo). Inherit from link:https://docs.nestjs.com/cli/overview[Nest CLI]

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the library.
| --name, -n            | The name of the library.
| --prefix              | The prefix of the library.
| --language            | Nest library language.
| --rootDir             | The libraries root directory.
|========

==== sub-app

Create a Nest application (mono-repo). Inherit from link:https://docs.nestjs.com/cli/overview[Nest CLI]

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | The path to create the application.
| --name, -n            | The name of the application.
| --language            | Nest application language.
| --rootDir             | Applications root directory.
|========

==== typeorm

Initialize typeorm into your current project in a correct way.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Path to project.
| --db                  | Database type.
|========

==== entity

Add a TypeOrm entity to your project. Requires TypeORM installed in the project.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Change the application folder where you will create the entity
| --name, -n            | The entity name. To create a entity with name Banana in the module fruits you need to introduce fruits/banana
|========

==== config-module

Add the config module to the project.

It will add the @devon4node/common module as a project dependency. Then, it will generate the configuration module into your project and add it in the core module. Also, it generates the config files for the most common environments.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Path to project.
|========

==== crud

Generate CRUD methods for a entity. Requires TypeORM installed in the project.

It will add the @nestjsx/crud module as a project dependency. Then, generates an entity, a CRUD controller and a CRUD service. It also register the entity, controller and service in the module.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Change the application folder where you will create the crud
| --name, -n            | The crud name. To create crud with name Banana in the module fruits you need to introduce fruits/banana
|========

==== mailer

Add @devon4node/mailer module to project.

It will add the @devon4node/mailer module as a project dependency. Also, it will add it to the core module and it will generate some email template examples.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Path to project.
|========

==== swagger

Add swagger module to project.

It will add the @nestjs/swagger module as a project dependency. Also, it will update the main.ts file in order to expose the endpoint for swagger. The default endpoint is: `/v1/api`

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Path to project.
|========

==== auth-jwt

Add the auth JWT module to the project.

It will add to your project the auth-jwt and user module. Also, it will import those modules into the core module.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Path to project.
|========

==== all-in-one

Execute multiple schematics at the same time.

This schematic is used by the interactive mode.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Path to config file
|========

==== security

Add cors and helmet to your project.

It will add helmet package as project dependency and update the main.ts file in order to enable the cors and helmet in your application.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --dry-run, -d         | Allow to test changes before execute command.
| --path, -p            | Path to project.
|========


=== db

Execute a database command. This command is an alias of `typeorm` command, so if you exetue the command `devon4node db migration:create` under the hood it will execute `typeorm migration:create`. For more information see link:https://typeorm.io/#/using-cli[typeorm CLI documentation].

==== schema:sync

Synchronizes your entities with database schema. It runs schema update queries on all connections you have. To run update queries on a concrete connection use -c option.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which schema synchronization needs to to run.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

Examples: 

----
devon4node db schema:sync
----

==== schema:log

Shows sql to be executed by schema:sync command. It shows sql log only for your default connection. To run update queries on a concrete connection use -c option.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which schema synchronization needs to to run.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

==== schema:drop

Drops all tables in the database on your default connection. To drop table of a concrete connection's database use -c option.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which schema synchronization needs to to run.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

==== query

Executes given SQL query on a default connection. Specify connection name to run query on a specific connection.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which schema synchronization needs to to run.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

==== entity:create

Generates a new entity.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which to run a query
| --name, -n            | Name of the entity class.
| --dir                 | Directory where entity should be created.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

==== subscriber:create

Generates a new subscriber.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which to run a query
| --name, -n            | Name of the entity class.
| --dir                 | Directory where entity should be created.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

==== migration:create

Creates a new migration file.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which to run a query
| --name, -n            | Name of the entity class.
| --dir                 | Directory where entity should be created.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

Examples: 

----
devon4node db migration:create -n InsertData
----

==== migration:generate

Generates a new migration file with sql needs to be executed to update schema.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which to run a query
| --name, -n            | Name of the entity class.
| --dir                 | Directory where entity should be created.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

Examples: 

----
devon4node db migration:generate -n CreateTables
----

==== migration:run

Runs all pending migrations.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which run a query.
| --transaction, -t     | Indicates if transaction should be used or not for migration run. Enabled by default.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

==== migration:show

Show all migrations and whether they have been run or not

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which run a query.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

==== migration:revert

Reverts last executed migration.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which run a query.
| --transaction, -t     | Indicates if transaction should be used or not for migration revert. Enabled by default.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========

==== version

Prints TypeORM version this project uses.

|========
| *Arguments*           | *Description*
| --help, -h             | Shows help
| --version, -v          | Shows number version
|========

Examples: 

----
devon4node db version
----

==== cache:clear

Clears all data stored in query runner cache.

|========
| *Arguments*           | *Description*
| --help, -h            | Shows help
| --connection, -c      | Name of the connection on which run a query.
| --config, -f          | Name of the file with connection configuration.
| --version, -v         | Shows number version
|========
